Helpers {
	Node = TextNode*
    TextNode = AnyExceptPlus<openControl>
    openControl = end

    empty = /* nothing */
    anyExcept<lit> = (~ lit any)
    anyExceptStar<lit> = (~ lit any)*
    anyExceptPlus<lit> = (~ lit any)+
    AnyExcept<lit> = (~ lit any)
    AnyExceptStar<lit> = (~ lit any)*
    AnyExceptPlus<lit> = (~ lit any)+
    identifierCharacter = alnum | "_" | "-"

    orderedListOf<a, b, sep> =
        | nonemptyOrderedListOf<a, b, sep>
        | emptyListOf<a, sep>
    nonemptyOrderedListOf<a, b, sep> =
        | nonemptyListOf<b, sep>
        | nonemptyOrderedListOfBoth<a, b, sep>
        | nonemptyListOf<a, sep>
    nonemptyOrderedListOfBoth<a, b, sep> =
        nonemptyListOf<a, sep> (sep nonemptyListOf<b, sep>)

    singleQuote = "'"
    doubleQuote = "\""
    controls = "\u{007F}".."\u{009F}"
    noncharacters = "\u{FDD0}".."\u{FDEF}"
    newline = "\r"? "\n"
}

Canvas <: Helpers {
	Node := (canvasNode | TextNode)*
    openControl := "{{" | "{%"
    endOfTagName = &("-%}" | "-}}" | "%}" | "}}")
    endOfVarName = ~identifierCharacter
    endOfIdentifier = endOfTagName | endOfVarName

    canvasNode =
    	| canvasComment
    	| canvasDrop
    	| canvasTagClose
        | canvasTagOpen
    	| canvasTag

    canvasTagStrict =
    	| canvasTagDo
    	| canvasTagExtends
    	| canvasTagElse
        | canvasTagInclude
        | canvasTagSet

    canvasTag =
    	| canvasTagStrict
        | canvasTagBaseCase

    canvasTagOpenStrict =
    	| canvasTagOpenApply
        | canvasTagOpenAutoescape
        | canvasTagOpenBlock
        | canvasTagOpenFor
        | canvasTagOpenGuard
        | canvasTagOpenIf

    canvasTagOpen =
    	| canvasTagOpenStrict
        | canvasTagOpenBaseCase

    canvasTagClose = "{%" "-"? space* "end" blockName space* tagMarkup "-"? "%}"

    // These two are the same but transformed differently
    canvasTagRule<name, markup> =
    	"{%" "-"? space* (name endOfIdentifier) space* markup "-"? "%}"
    canvasTagOpenRule<name, markup> =
    	"{%" "-"? space* (name endOfIdentifier) space* markup "-"? "%}"

    canvasTagBaseCase = canvasTagRule<canvasTagName, tagMarkup>

    canvasTagOpenApply = canvasTagOpenRule<"apply", canvasTagOpenApplyMarkup>
    canvasTagOpenApplyMarkup = space* initialFilter<delimTag> (additionalFilters<delimTag>)? space*

    canvasTagOpenAutoescape = canvasTagOpenRule<"autoescape", canvasTagOpenAutoescapeMarkup>
    canvasTagOpenAutoescapeMarkup = (canvasString<delimTag> | canvasLiteral) space*

    canvasTagOpenBlock =
    	| canvasTagOpenRule<"block", canvasTagOpenBlockMarkup>
        | canvasTagOpenRule<"block", canvasTagOpenBlockShortcutMarkup>
    canvasTagOpenBlockMarkup = arguments<delimTag> space*
    canvasTagOpenBlockShortcutMarkup = canvasTagOpenBlockMarkup canvasVariable<delimTag>

    canvasTagOpenGuard = canvasTagOpenRule<"guard", canvasTagOpenGuardMarkup>
    canvasTagOpenGuardMarkup = ("filter" | "function" | "test") space* variableSegment space*

    canvasTagDo = canvasTagRule<"do", canvasTagDoMarkup>
    canvasTagDoMarkup = canvasVariable<delimTag>

    canvasTagExtends = canvasTagRule<"extends", canvasTagExtendsMarkup>
    canvasTagExtendsMarkup =
    	snippetExpression space*
    snippetExpression = canvasExpression<delimTag>

    canvasTagInclude = canvasTagRule<"include", canvasTagIncludeMarkup>
    canvasTagIncludeMarkup =
    	snippetExpression
        (space+ "ignore missing")?
        includeVariableExpression<delimTag>?
        includeAliasExpression?
        space*
    includeVariableExpression<delim> = space+ ("with") space+ canvasExpression<delim>
    includeAliasExpression = space+ ("only")

    canvasTagSet = canvasTagRule<"set", canvasTagSetMarkup>
    canvasTagSetMarkup = variableSegment space* "=" space* canvasVariable<delimTag>

    canvasTagOpenBaseCase = canvasTagOpenRule<blockName, tagMarkup>

    canvasTagOpenFor = canvasTagOpenRule<"for", canvasTagOpenForMarkup>
    canvasTagOpenForMarkup =
    	keyValueIteration space* "in" space* (canvasVariable<delimTag> | canvasRange<delimTag>) space*
    keyValueIteration =
    	| keyValueSegment
        | variableSegment
    keyValueSegment = variableSegment space* "," space* variableSegment

    canvasTagOpenIf = canvasTagOpenRule<"if", canvasTagOpenConditionalMarkup>

    canvasTagElse = canvasTagRule<"else", empty>

    canvasTagOpenConditionalMarkup = nonemptyListOf<condition<delimTag>, conditionSeparator> space*
    conditionSeparator = &logicalOperator
    condition<delim> =
    	logicalOperator? space* (comparison<delim> | canvasTestExpression<delim> | canvasExpression<delim>) space*
    logicalOperator = ("and" | "xor" | "or" | "not" | "in" | "not in") ~identifier
    testOperator = ("constant" | "defined" | "divisible by" | "empty" | "even" | "iterable" | "null" | "odd" | "same as") ~identifier
    comparison<delim> =
    	canvasExpression<delim> space* comparator space* canvasExpression<delim>
    comparator =
    	( "<=>"
        | "=="
        | "!="
        | ">="
        | "<="
        | ">"
        | "<"
        | "in"
        | "not in")

    canvasTestExpression<delim> = canvasExpression<delim> space* ("is" | "is not") space* testOperator (space* "(" space* arguments<delim>? space* ")")?

    canvasDrop = "{{" "-"? space* canvasDropCases "-"? "}}"
    canvasDropCases = canvasVariable<delimVO> | canvasDropBaseCase
    canvasDropBaseCase = anyExceptStar<delimVO>

    canvasComment = "{#" space* anyExceptStar<"#}"> space* "#}"

    canvasVariable<delim> = canvasExpression<delim> canvasFilter<delim>* space* &delim

    canvasExpression<delim> =
    	  | canvasConcatenation<delim>
    	  | canvasString<delim>
        | canvasNumber
        | canvasLiteral
        | canvasRange<delim>
        | canvasSequence<delim>
        | canvasMapping<delim>
        | canvasFunction<delim>
        | canvasArrowFunction<delim>
        | canvasComparison<delim>
        | canvasTernaryOperator<delim>
        | canvasVariableLookup<delim>

    canvasConcatenation<delim> = canvasExpression<delim> space* "~" space* canvasExpression<delim>

    canvasString<delim> = canvasSingleQuotedString<delim> | canvasDoubleQuotedString<delim>
    canvasSingleQuotedString<delim> = "'" anyExceptStar<("'" | delim)> "'"
    canvasDoubleQuotedString<delim> = "\"" anyExceptStar<("\"" | delim)> "\""

    canvasNumber = canvasFloat | canvasInteger
    canvasInteger = "-"? digit+
    canvasFloat = "-"? digit+ "." digit+

    canvasLiteral =
    	( "true"
        | "false"
        | "null"
        | "none"
        ) endOfIdentifier

    canvasRange<delim> =
    	"(" space* canvasExpression<delim> space* ".." space* canvasExpression<delim> space* ")"

    canvasFunction<delim> =
    	identifier space* "(" space* arguments<delim>? space* ")"

    canvasArrowFunction<delim> =
    	"(" space* arrowFunctionArgumentList<delim> space* ")" space* "=>" space* canvasExpression<delim>

    arrowFunctionArgumentList<delim> =
  		nonemptyListOf<variableSegmentAsLookup, argumentSeparator>

    canvasComparison<delim> = comparison<delim>

    canvasSequence<delim> =
    	"[" space* nonemptyListOf<canvasExpression<delim>, argumentSeparator> space* "]"

    canvasMapping<delim> =
    	"{" space* arguments<delim> space* "}"

    canvasTernaryOperator<delim> =
    	canvasExpression<delim> space* "?" space* canvasExpression<delim> space* ":" space* canvasExpression<delim>

    canvasVariableLookup<delim> =
    	| reservedKeyword lookup<delim>*
    	| variableSegment lookup<delim>*
        | empty lookup<delim>+
    lookup<delim> =
    	| indexLookup<delim>
        | dotLookup
    indexLookup<delim> = space* "[" space* canvasExpression<delim> space* "]"
    dotLookup = space* "." space* identifier

    reservedKeyword =
    	("loop" | "parent" | "block" | "attribute") endOfIdentifier

    canvasFilter<delim> = space* "|" space* identifier (space* "(" space* arguments<delim> space* ")")?
    initialFilter<delim> = identifier (space* "(" space* arguments<delim> space* ")")? // First filter (no leading "|")
    additionalFilters<delim> = canvasFilter<delim>+ // Must match at lease one filter if present

    arguments<delim> = nonemptyOrderedListOf<positionalArgument<delim>, namedArgument<delim>, argumentSeparator>
  	argumentSeparator = space* "," space*
    argumentSeparatorOptionalComma = space* ","? space*
    positionalArgument<delim> = canvasExpression<delim> ~(space* ("=" | ":"))
    namedArgument<delim> = canvasExpression<delim> space* ("=" | ":") space* canvasExpression<delim>
    tagArguments = listOf<namedArgument<delimTag>, argumentSeparatorOptionalComma>

    variableSegment = (letter | "_") (~endOfTagName identifierCharacter)*
    variableSegmentAsLookup = variableSegment
    identifier = variableSegment "?"?

    tagMarkup = anyExceptStar<delimTag>

    canvasTagName =
    	letter (alnum | "_")*

    blockName =
    	// Blutui blocks
        ( "form"
        // Base blocks
        | "apply"
        | "autoescape"
        | "block"
        | "for"
        | "guard"
        | "if"
        ) endOfIdentifier

    delimTag = "-%}" | "%}"
    delimVO = "-}}" | "}}"
}

CanvasHTML <: Canvas {
	Node := (HtmlNode | canvasNode | TextNode)*
	openControl += "<"

    HtmlNode =
    	| HtmlDoctype
    	| HtmlComment
        | HtmlRawTag
    	| HtmlVoidElement
    	| HtmlSelfClosingElement
    	| HtmlTagClose
        | HtmlTagOpen

    // https://html.spec.whatwg.org/multipage/syntax.html#the-doctype
   	HtmlDoctype =
    	#("<!" caseInsensitive<"doctype"> space+ caseInsensitive<"html">) legacyDoctypeString? ">"
    legacyDoctypeString = anyExceptPlus<">">

    HtmlComment = "<!--" #(anyExceptStar<"-->"> "-->")

    // These are black holes, we'll ignore what's in them
    HtmlRawTag =
    	| HtmlRawTagImpl<"script">
        | HtmlRawTagImpl<"style">
        | HtmlRawTagImpl<"svg">

    HtmlRawTagImpl<name> =
    	TagStart<name>
      		HtmlRawTagContent<name>
        TagEnd<name>
    HtmlRawTagContent<name> = AnyExceptPlus<TagEnd<name>>

    TagStart<name> = "<" name AttrList ">"
    TagEnd<name> = "</" name ">"

    HtmlVoidElement =
    	#("<" voidElementName &(space | "/" | ">")) AttrList "/"? ">"

    HtmlSelfClosingElement =
    	#("<" tagName) AttrList "/>"

    HtmlTagOpen =
    	#("<" tagName) AttrList ">"

    HtmlTagClose =
    	#("</" tagName) ">"

    tagName = leadingTagNamePart trailingTagNamePart*

    // The difference here is that the first test part must start
    // with a letter, but trailing text parts don't have that
    // requirement
    leadingTagNamePart =
    	| canvasDrop
    	| leadingTagNameTextNode

    trailingTagNamePart =
    	| canvasDrop
    	| trailingTagNameTextNode

    leadingTagNameTextNode = letter (alnum | "-" | ":")*
    trailingTagNameTextNode = (alnum | "-" | ":")+

    AttrList = Attr*

    Attr =
    	canvasNode | AttrSingleQuoted | AttrDoubleQuoted | AttrUnquoted | canvasNode | attrEmpty

    attrEmpty = attrName

    AttrUnquoted = attrName "=" attrUnquotedValue
    AttrSingleQuoted = attrName "=" singleQuote #(attrSingleQuotedValue singleQuote)
    AttrDoubleQuoted = attrName "=" doubleQuote #(attrDoubleQuotedValue doubleQuote)

    attrName = (canvasDrop | attrNameTextNode)+

    // https://html.spec.whatwg.org/#attributes-2
    attrNameTextNode = anyExceptPlus<(space | quotes | "=" | ">" | "/>" | "{{" | "{%" | controls | noncharacters)>
    attrUnquotedValue = (canvasDrop | attrUnquotedTextNode)*
    attrSingleQuotedValue = (canvasNode | attrSingleQuotedTextNode)*
    attrDoubleQuotedValue = (canvasNode | attrDoubleQuotedTextNode)*

    attrUnquotedTextNode = anyExceptPlus<(space | quotes | "=" | "<" | ">" | "`" | "{{" | "{%")>
    attrSingleQuotedTextNode = anyExceptPlus<(singleQuote | "{{" | "{%")>
    attrDoubleQuotedTextNode = anyExceptPlus<(doubleQuote | "{{" | "{%")>

    quotes = singleQuote | doubleQuote

    // https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#void-element
    voidElementName =
    	( caseInsensitive<"area">
        | caseInsensitive<"base">
        | caseInsensitive<"br">
        | caseInsensitive<"col">
        | caseInsensitive<"command">
        | caseInsensitive<"embed">
        | caseInsensitive<"hr">
        | caseInsensitive<"img">
        | caseInsensitive<"input">
        | caseInsensitive<"keygen">
        | caseInsensitive<"link">
        | caseInsensitive<"meta">
        | caseInsensitive<"param">
        | caseInsensitive<"source">
        | caseInsensitive<"track">
        | caseInsensitive<"wbr">
        ) ~identifierCharacter
}
